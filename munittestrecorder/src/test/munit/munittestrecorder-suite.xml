<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="munittestrecorder-suite.xml" />
	<munit:test name="munittestrecorderFlow-test" doc:id="ef901352-cae7-4100-8f21-e57cd5059602" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="99100773-1f88-4517-ba85-8139d034674b" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="47903cf4-0b79-4a78-9a19-4ee0f52a70b7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://munittestrecorderFlowtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://munittestrecorderFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="f3dde2aa-27f7-45c6-b974-b6adea409996" >
				<munit:payload value="#[readUrl('classpath://munittestrecorderFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://munittestrecorderFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to munittestrecorderFlow" doc:id="db4fcec0-6fcb-4be9-9591-ab473f88c2aa" name="munittestrecorderFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="7cea25a9-588a-440e-8d48-3cc9cea73016" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import munittestrecorderFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="munittestrecorderFlow-test1" doc:id="b64a698e-115c-48e3-97b8-6f0750832b04" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="3fde72e9-e8a3-4955-a3aa-1a33d7af56a9" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="47903cf4-0b79-4a78-9a19-4ee0f52a70b7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://munittestrecorderFlowtest1\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://munittestrecorderFlowtest1\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="1384c486-f45c-430a-a323-90cb05501ab4" >
				<munit:payload value="#[readUrl('classpath://munittestrecorderFlowtest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://munittestrecorderFlowtest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to munittestrecorderFlow" doc:id="26173641-1e96-41e9-a1eb-6af77fd45224" name="munittestrecorderFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="edc2705a-4ec6-49ec-8385-892fcd2b4edb" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import munittestrecorderFlowtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
